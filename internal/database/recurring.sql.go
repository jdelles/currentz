// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: recurring.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRecurring = `-- name: CreateRecurring :one
INSERT INTO recurring_transactions (
  description,
  type,
  amount,
  start_date,
  "interval",
  day_of_week,
  day_of_month,
  end_date,
  active
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9
)
RETURNING id, description, type, amount, start_date, interval, day_of_week, day_of_month, end_date, active
`

type CreateRecurringParams struct {
	Description string             `json:"description"`
	Type        string             `json:"type"`
	Amount      pgtype.Numeric     `json:"amount"`
	StartDate   pgtype.Date        `json:"start_date"`
	Interval    RecurrenceInterval `json:"interval"`
	DayOfWeek   pgtype.Int4        `json:"day_of_week"`
	DayOfMonth  pgtype.Int4        `json:"day_of_month"`
	EndDate     pgtype.Date        `json:"end_date"`
	Active      bool               `json:"active"`
}

func (q *Queries) CreateRecurring(ctx context.Context, arg CreateRecurringParams) (RecurringTransactions, error) {
	row := q.db.QueryRow(ctx, createRecurring,
		arg.Description,
		arg.Type,
		arg.Amount,
		arg.StartDate,
		arg.Interval,
		arg.DayOfWeek,
		arg.DayOfMonth,
		arg.EndDate,
		arg.Active,
	)
	var i RecurringTransactions
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Type,
		&i.Amount,
		&i.StartDate,
		&i.Interval,
		&i.DayOfWeek,
		&i.DayOfMonth,
		&i.EndDate,
		&i.Active,
	)
	return i, err
}

const deleteRecurring = `-- name: DeleteRecurring :exec
DELETE FROM recurring_transactions WHERE id = $1
`

func (q *Queries) DeleteRecurring(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRecurring, id)
	return err
}

const getRecurringByID = `-- name: GetRecurringByID :one
SELECT id, description, type, amount, start_date, interval, day_of_week, day_of_month, end_date, active FROM recurring_transactions WHERE id = $1
`

func (q *Queries) GetRecurringByID(ctx context.Context, id int32) (RecurringTransactions, error) {
	row := q.db.QueryRow(ctx, getRecurringByID, id)
	var i RecurringTransactions
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Type,
		&i.Amount,
		&i.StartDate,
		&i.Interval,
		&i.DayOfWeek,
		&i.DayOfMonth,
		&i.EndDate,
		&i.Active,
	)
	return i, err
}

const listActiveRecurring = `-- name: ListActiveRecurring :many
SELECT id, description, type, amount, start_date, interval, day_of_week, day_of_month, end_date, active FROM recurring_transactions WHERE active = TRUE
`

func (q *Queries) ListActiveRecurring(ctx context.Context) ([]RecurringTransactions, error) {
	rows, err := q.db.Query(ctx, listActiveRecurring)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RecurringTransactions{}
	for rows.Next() {
		var i RecurringTransactions
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Type,
			&i.Amount,
			&i.StartDate,
			&i.Interval,
			&i.DayOfWeek,
			&i.DayOfMonth,
			&i.EndDate,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecurring = `-- name: ListRecurring :many
SELECT id, description, type, amount, start_date, interval, day_of_week, day_of_month, end_date, active FROM recurring_transactions ORDER BY id
`

func (q *Queries) ListRecurring(ctx context.Context) ([]RecurringTransactions, error) {
	rows, err := q.db.Query(ctx, listRecurring)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RecurringTransactions{}
	for rows.Next() {
		var i RecurringTransactions
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Type,
			&i.Amount,
			&i.StartDate,
			&i.Interval,
			&i.DayOfWeek,
			&i.DayOfMonth,
			&i.EndDate,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setRecurringActive = `-- name: SetRecurringActive :exec
UPDATE recurring_transactions
SET active = $1
WHERE id = $2
`

type SetRecurringActiveParams struct {
	Active bool  `json:"active"`
	ID     int32 `json:"id"`
}

func (q *Queries) SetRecurringActive(ctx context.Context, arg SetRecurringActiveParams) error {
	_, err := q.db.Exec(ctx, setRecurringActive, arg.Active, arg.ID)
	return err
}

const updateRecurring = `-- name: UpdateRecurring :one
UPDATE recurring_transactions
SET
  description  = $1,
  type         = $2,
  amount       = $3,
  start_date   = $4,
  "interval"   = $5,
  day_of_week  = $6,
  day_of_month = $7,
  end_date     = $8,
  active       = $9
WHERE id = $10
RETURNING id, description, type, amount, start_date, interval, day_of_week, day_of_month, end_date, active
`

type UpdateRecurringParams struct {
	Description string             `json:"description"`
	Type        string             `json:"type"`
	Amount      pgtype.Numeric     `json:"amount"`
	StartDate   pgtype.Date        `json:"start_date"`
	Interval    RecurrenceInterval `json:"interval"`
	DayOfWeek   pgtype.Int4        `json:"day_of_week"`
	DayOfMonth  pgtype.Int4        `json:"day_of_month"`
	EndDate     pgtype.Date        `json:"end_date"`
	Active      bool               `json:"active"`
	ID          int32              `json:"id"`
}

func (q *Queries) UpdateRecurring(ctx context.Context, arg UpdateRecurringParams) (RecurringTransactions, error) {
	row := q.db.QueryRow(ctx, updateRecurring,
		arg.Description,
		arg.Type,
		arg.Amount,
		arg.StartDate,
		arg.Interval,
		arg.DayOfWeek,
		arg.DayOfMonth,
		arg.EndDate,
		arg.Active,
		arg.ID,
	)
	var i RecurringTransactions
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Type,
		&i.Amount,
		&i.StartDate,
		&i.Interval,
		&i.DayOfWeek,
		&i.DayOfMonth,
		&i.EndDate,
		&i.Active,
	)
	return i, err
}
