// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO transactions (date, amount, description, type)
VALUES ($1, $2, $3, $4)
`

type CreateTransactionParams struct {
	Date        pgtype.Date    `json:"date"`
	Amount      pgtype.Numeric `json:"amount"`
	Description string         `json:"description"`
	Type        string         `json:"type"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.Exec(ctx, createTransaction,
		arg.Date,
		arg.Amount,
		arg.Description,
		arg.Type,
	)
	return err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTransaction, id)
	return err
}

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT id, date, amount, description, type, created_at
FROM transactions
ORDER BY date ASC
`

func (q *Queries) GetAllTransactions(ctx context.Context) ([]Transactions, error) {
	rows, err := q.db.Query(ctx, getAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transactions{}
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Amount,
			&i.Description,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, date, amount, description, type, created_at
FROM transactions
WHERE id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id int32) (Transactions, error) {
	row := q.db.QueryRow(ctx, getTransactionByID, id)
	var i Transactions
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Amount,
		&i.Description,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const getTransactionsByDateRange = `-- name: GetTransactionsByDateRange :many
SELECT id, date, amount, description, type, created_at
FROM transactions
WHERE date BETWEEN $1 AND $2
ORDER BY date ASC
`

type GetTransactionsByDateRangeParams struct {
	Date   pgtype.Date `json:"date"`
	Date_2 pgtype.Date `json:"date_2"`
}

func (q *Queries) GetTransactionsByDateRange(ctx context.Context, arg GetTransactionsByDateRangeParams) ([]Transactions, error) {
	rows, err := q.db.Query(ctx, getTransactionsByDateRange, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transactions{}
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Amount,
			&i.Description,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByType = `-- name: GetTransactionsByType :many
SELECT id, date, amount, description, type, created_at
FROM transactions
WHERE type = $1
ORDER BY date ASC
`

func (q *Queries) GetTransactionsByType(ctx context.Context, type_ string) ([]Transactions, error) {
	rows, err := q.db.Query(ctx, getTransactionsByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transactions{}
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Amount,
			&i.Description,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
