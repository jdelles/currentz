// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: settings.sql

package database

import (
	"context"
)

const deleteSetting = `-- name: DeleteSetting :exec
DELETE FROM settings WHERE key = $1
`

func (q *Queries) DeleteSetting(ctx context.Context, key string) error {
	_, err := q.db.Exec(ctx, deleteSetting, key)
	return err
}

const getAllSettings = `-- name: GetAllSettings :many
SELECT key, value, updated_at FROM settings
`

func (q *Queries) GetAllSettings(ctx context.Context) ([]Settings, error) {
	rows, err := q.db.Query(ctx, getAllSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Settings{}
	for rows.Next() {
		var i Settings
		if err := rows.Scan(&i.Key, &i.Value, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSetting = `-- name: GetSetting :one
SELECT value FROM settings WHERE key = $1
`

func (q *Queries) GetSetting(ctx context.Context, key string) (string, error) {
	row := q.db.QueryRow(ctx, getSetting, key)
	var value string
	err := row.Scan(&value)
	return value, err
}

const updateSetting = `-- name: UpdateSetting :exec
INSERT INTO settings (key, value, updated_at)
VALUES ($1, $2, CURRENT_TIMESTAMP)
ON CONFLICT (key)
DO UPDATE SET value = $2, updated_at = CURRENT_TIMESTAMP
`

type UpdateSettingParams struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) error {
	_, err := q.db.Exec(ctx, updateSetting, arg.Key, arg.Value)
	return err
}
